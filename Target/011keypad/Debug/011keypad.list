
011keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000fcc  08000fcc  00010fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800100c  0800100c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800100c  0800100c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800100c  0800100c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800100c  0800100c  0001100c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001010  08001010  00011010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000989  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000334  00000000  00000000  00020a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000120  00000000  00000000  00020d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000c5  00000000  00000000  00020eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002c9b  00000000  00000000  00020f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000155d  00000000  00000000  00023c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000097d9  00000000  00000000  0002516d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000009fc  00000000  00000000  0002e948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0002f344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000fb4 	.word	0x08000fb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08000fb4 	.word	0x08000fb4

080001c8 <delay>:


#include<stdint.h>
#include<stdio.h>
void delay(void){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i<300000; i++);
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <delay+0x28>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d9f8      	bls.n	80001d4 <delay+0xc>
}
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	000493df 	.word	0x000493df

080001f4 <main>:

int main(void){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
	//peripherals register address
	uint32_t volatile *const pGPIODModReg   = (uint32_t*)(0x40020C00+00);
 80001fa:	4b88      	ldr	r3, [pc, #544]	; (800041c <main+0x228>)
 80001fc:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const pClkCtrlReg    = (uint32_t*)(0x40023800+0x30);
 80001fe:	4b88      	ldr	r3, [pc, #544]	; (8000420 <main+0x22c>)
 8000200:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pInDataReg     = (uint32_t*)(0x40020C00+0x10);
 8000202:	4b88      	ldr	r3, [pc, #544]	; (8000424 <main+0x230>)
 8000204:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const pOutDataReg    = (uint32_t*)(0x40020C00+0x14);
 8000206:	4b88      	ldr	r3, [pc, #544]	; (8000428 <main+0x234>)
 8000208:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const pPullupDownReg = (uint32_t*)(0x40020C00+0x0C);
 800020a:	4b88      	ldr	r3, [pc, #544]	; (800042c <main+0x238>)
 800020c:	607b      	str	r3, [r7, #4]
	//1.Enable the peripheral clock of GPIOD peripheral
	*pClkCtrlReg |= (1 << 3);
 800020e:	693b      	ldr	r3, [r7, #16]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 0208 	orr.w	r2, r3, #8
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	601a      	str	r2, [r3, #0]

	//2. Configure PD0,PD1,PD2,PD3 as OUTPUT (rows)
	*pGPIODModReg &= ~(0xFF);//clear
 800021a:	697b      	ldr	r3, [r7, #20]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000222:	697b      	ldr	r3, [r7, #20]
 8000224:	601a      	str	r2, [r3, #0]
	*pGPIODModReg |= (0x55);//set
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 0255 	orr.w	r2, r3, #85	; 0x55
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	601a      	str	r2, [r3, #0]

	//3. configure PD8, PD9, PD10, PD11 as input(columns)
	*pGPIODModReg &= ~(0xFF << 16);//clear (automatically set zero)
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	601a      	str	r2, [r3, #0]
	//*pGPIODModReg |= (0x00 << 16);//set.

	//4.Enable internal pullup down resister for PD8, PD9, PD10, PD11
	*pPullupDownReg &= ~(0xFF << 16);//clear
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	601a      	str	r2, [r3, #0]
	*pPullupDownReg |= (0x55 << 16);//set.
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f443 02aa 	orr.w	r2, r3, #5570560	; 0x550000
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	601a      	str	r2, [r3, #0]

	while(1){

		//make all the row are high.
		*pOutDataReg |= 0x0F;
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f043 020f 	orr.w	r2, r3, #15
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	601a      	str	r2, [r3, #0]
		//Make R1 LOw (PD0)
		*pOutDataReg &= ~(1<<0);//clear
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f023 0201 	bic.w	r2, r3, #1
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	601a      	str	r2, [r3, #0]

		//scan the columns
		// check c1(PD8) low or high
		if(!(*pInDataReg & (1<<8))){
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000276:	2b00      	cmp	r3, #0
 8000278:	d104      	bne.n	8000284 <main+0x90>
			//key pressed
			delay();
 800027a:	f7ff ffa5 	bl	80001c8 <delay>
			printf("1\n");
 800027e:	486c      	ldr	r0, [pc, #432]	; (8000430 <main+0x23c>)
 8000280:	f000 fb02 	bl	8000888 <puts>
		}
		// check c2(PD9) low or high
		if(!(*pInDataReg & (1<<9))){
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800028c:	2b00      	cmp	r3, #0
 800028e:	d104      	bne.n	800029a <main+0xa6>
			//key pressed
			delay();
 8000290:	f7ff ff9a 	bl	80001c8 <delay>
			printf("2\n");
 8000294:	4867      	ldr	r0, [pc, #412]	; (8000434 <main+0x240>)
 8000296:	f000 faf7 	bl	8000888 <puts>
		}
		// check c3(PD10) low or high
		if(!(*pInDataReg & (1<<10))){
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d104      	bne.n	80002b0 <main+0xbc>
			//key pressed
			delay();
 80002a6:	f7ff ff8f 	bl	80001c8 <delay>
			printf("3\n");
 80002aa:	4863      	ldr	r0, [pc, #396]	; (8000438 <main+0x244>)
 80002ac:	f000 faec 	bl	8000888 <puts>
		}
		// check c4(PD11) low or high
		if(!(*pInDataReg & (1<<11))){
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d104      	bne.n	80002c6 <main+0xd2>
			//key pressed
			delay();
 80002bc:	f7ff ff84 	bl	80001c8 <delay>
			printf("A\n");
 80002c0:	485e      	ldr	r0, [pc, #376]	; (800043c <main+0x248>)
 80002c2:	f000 fae1 	bl	8000888 <puts>
		}
		//make all the row are high.
		*pOutDataReg |= 0x0F;
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f043 020f 	orr.w	r2, r3, #15
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	601a      	str	r2, [r3, #0]
		//Make R2 LOw (PD1)
		*pOutDataReg &= ~(1<<1);//clear
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f023 0202 	bic.w	r2, r3, #2
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	601a      	str	r2, [r3, #0]

		//scan the columns
		// check c1(PD8) low or high
		if(!(*pInDataReg & (1<<8))){
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d104      	bne.n	80002f4 <main+0x100>
			//key pressed
			delay();
 80002ea:	f7ff ff6d 	bl	80001c8 <delay>
			printf("4\n");
 80002ee:	4854      	ldr	r0, [pc, #336]	; (8000440 <main+0x24c>)
 80002f0:	f000 faca 	bl	8000888 <puts>
		}
		// check c2(PD9) low or high
		if(!(*pInDataReg & (1<<9))){
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d104      	bne.n	800030a <main+0x116>
			//key pressed
			delay();
 8000300:	f7ff ff62 	bl	80001c8 <delay>
			printf("5\n");
 8000304:	484f      	ldr	r0, [pc, #316]	; (8000444 <main+0x250>)
 8000306:	f000 fabf 	bl	8000888 <puts>
		}
			// check c3(PD10) low or high
		if(!(*pInDataReg & (1<<10))){
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000312:	2b00      	cmp	r3, #0
 8000314:	d104      	bne.n	8000320 <main+0x12c>
			//key pressed
			delay();
 8000316:	f7ff ff57 	bl	80001c8 <delay>
			printf("6\n");
 800031a:	484b      	ldr	r0, [pc, #300]	; (8000448 <main+0x254>)
 800031c:	f000 fab4 	bl	8000888 <puts>
		}
		// check c4(PD11) low or high
		if(!(*pInDataReg & (1<<11))){
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000328:	2b00      	cmp	r3, #0
 800032a:	d104      	bne.n	8000336 <main+0x142>
			//key pressed
			delay();
 800032c:	f7ff ff4c 	bl	80001c8 <delay>
			printf("B\n");
 8000330:	4846      	ldr	r0, [pc, #280]	; (800044c <main+0x258>)
 8000332:	f000 faa9 	bl	8000888 <puts>
		}
		//make all the row are high.
		*pOutDataReg |= 0x0F;
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f043 020f 	orr.w	r2, r3, #15
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	601a      	str	r2, [r3, #0]
		//Make R3 LOw (PD2)
		*pOutDataReg &= ~(1<<2);//clear
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f023 0204 	bic.w	r2, r3, #4
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	601a      	str	r2, [r3, #0]

		//scan the columns
		// check c1(PD8) low or high
		if(!(*pInDataReg & (1<<8))){
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000356:	2b00      	cmp	r3, #0
 8000358:	d104      	bne.n	8000364 <main+0x170>
			//key pressed
			delay();
 800035a:	f7ff ff35 	bl	80001c8 <delay>
			printf("7\n");
 800035e:	483c      	ldr	r0, [pc, #240]	; (8000450 <main+0x25c>)
 8000360:	f000 fa92 	bl	8000888 <puts>
		}
		// check c2(PD9) low or high
		if(!(*pInDataReg & (1<<9))){
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800036c:	2b00      	cmp	r3, #0
 800036e:	d104      	bne.n	800037a <main+0x186>
			//key pressed
			delay();
 8000370:	f7ff ff2a 	bl	80001c8 <delay>
			printf("8\n");
 8000374:	4837      	ldr	r0, [pc, #220]	; (8000454 <main+0x260>)
 8000376:	f000 fa87 	bl	8000888 <puts>
		}
		// check c3(PD10) low or high
		if(!(*pInDataReg & (1<<10))){
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000382:	2b00      	cmp	r3, #0
 8000384:	d104      	bne.n	8000390 <main+0x19c>
			//key pressed
			delay();
 8000386:	f7ff ff1f 	bl	80001c8 <delay>
			printf("9\n");
 800038a:	4833      	ldr	r0, [pc, #204]	; (8000458 <main+0x264>)
 800038c:	f000 fa7c 	bl	8000888 <puts>
		}
		// check c4(PD11) low or high
		if(!(*pInDataReg & (1<<11))){
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000398:	2b00      	cmp	r3, #0
 800039a:	d104      	bne.n	80003a6 <main+0x1b2>
			//key pressed
			delay();
 800039c:	f7ff ff14 	bl	80001c8 <delay>
			printf("C\n");
 80003a0:	482e      	ldr	r0, [pc, #184]	; (800045c <main+0x268>)
 80003a2:	f000 fa71 	bl	8000888 <puts>
		}
		//make all the row are high.
		*pOutDataReg |= 0x0F;
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f043 020f 	orr.w	r2, r3, #15
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	601a      	str	r2, [r3, #0]
		//Make R4 LOw (PD3)
		*pOutDataReg &= ~(1<<3);//clear
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f023 0208 	bic.w	r2, r3, #8
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	601a      	str	r2, [r3, #0]

		//scan the columns
		// check c1(PD8) low or high
		if(!(*pInDataReg & (1<<8))){
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d104      	bne.n	80003d4 <main+0x1e0>
			//key pressed
			delay();
 80003ca:	f7ff fefd 	bl	80001c8 <delay>
			printf("*\n");
 80003ce:	4824      	ldr	r0, [pc, #144]	; (8000460 <main+0x26c>)
 80003d0:	f000 fa5a 	bl	8000888 <puts>
		}
		// check c2(PD9) low or high
		if(!(*pInDataReg & (1<<9))){
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d104      	bne.n	80003ea <main+0x1f6>
			//key pressed
			delay();
 80003e0:	f7ff fef2 	bl	80001c8 <delay>
			printf("0\n");
 80003e4:	481f      	ldr	r0, [pc, #124]	; (8000464 <main+0x270>)
 80003e6:	f000 fa4f 	bl	8000888 <puts>
		}
		// check c3(PD10) low or high
		if(!(*pInDataReg & (1<<10))){
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d104      	bne.n	8000400 <main+0x20c>
			//key pressed
			delay();
 80003f6:	f7ff fee7 	bl	80001c8 <delay>
			printf("#\n");
 80003fa:	481b      	ldr	r0, [pc, #108]	; (8000468 <main+0x274>)
 80003fc:	f000 fa44 	bl	8000888 <puts>
		}
		// check c4(PD11) low or high
		if(!(*pInDataReg & (1<<11))){
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000408:	2b00      	cmp	r3, #0
 800040a:	f47f af24 	bne.w	8000256 <main+0x62>
			//key pressed
			delay();
 800040e:	f7ff fedb 	bl	80001c8 <delay>
			printf("D\n");
 8000412:	4816      	ldr	r0, [pc, #88]	; (800046c <main+0x278>)
 8000414:	f000 fa38 	bl	8000888 <puts>
		*pOutDataReg |= 0x0F;
 8000418:	e71d      	b.n	8000256 <main+0x62>
 800041a:	bf00      	nop
 800041c:	40020c00 	.word	0x40020c00
 8000420:	40023830 	.word	0x40023830
 8000424:	40020c10 	.word	0x40020c10
 8000428:	40020c14 	.word	0x40020c14
 800042c:	40020c0c 	.word	0x40020c0c
 8000430:	08000fcc 	.word	0x08000fcc
 8000434:	08000fd0 	.word	0x08000fd0
 8000438:	08000fd4 	.word	0x08000fd4
 800043c:	08000fd8 	.word	0x08000fd8
 8000440:	08000fdc 	.word	0x08000fdc
 8000444:	08000fe0 	.word	0x08000fe0
 8000448:	08000fe4 	.word	0x08000fe4
 800044c:	08000fe8 	.word	0x08000fe8
 8000450:	08000fec 	.word	0x08000fec
 8000454:	08000ff0 	.word	0x08000ff0
 8000458:	08000ff4 	.word	0x08000ff4
 800045c:	08000ff8 	.word	0x08000ff8
 8000460:	08000ffc 	.word	0x08000ffc
 8000464:	08001000 	.word	0x08001000
 8000468:	08001004 	.word	0x08001004
 800046c:	08001008 	.word	0x08001008

08000470 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <ITM_SendChar+0x48>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a0e      	ldr	r2, [pc, #56]	; (80004b8 <ITM_SendChar+0x48>)
 8000480:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000484:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000486:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <ITM_SendChar+0x4c>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a0c      	ldr	r2, [pc, #48]	; (80004bc <ITM_SendChar+0x4c>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000492:	bf00      	nop
 8000494:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0f8      	beq.n	8000494 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	6013      	str	r3, [r2, #0]
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	e000edfc 	.word	0xe000edfc
 80004bc:	e0000e00 	.word	0xe0000e00

080004c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	e00a      	b.n	80004e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004d2:	f3af 8000 	nop.w
 80004d6:	4601      	mov	r1, r0
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	1c5a      	adds	r2, r3, #1
 80004dc:	60ba      	str	r2, [r7, #8]
 80004de:	b2ca      	uxtb	r2, r1
 80004e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	3301      	adds	r3, #1
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	697a      	ldr	r2, [r7, #20]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	dbf0      	blt.n	80004d2 <_read+0x12>
  }

  return len;
 80004f0:	687b      	ldr	r3, [r7, #4]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3718      	adds	r7, #24
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b086      	sub	sp, #24
 80004fe:	af00      	add	r7, sp, #0
 8000500:	60f8      	str	r0, [r7, #12]
 8000502:	60b9      	str	r1, [r7, #8]
 8000504:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	e009      	b.n	8000520 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	60ba      	str	r2, [r7, #8]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff ffab 	bl	8000470 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3301      	adds	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697a      	ldr	r2, [r7, #20]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	429a      	cmp	r2, r3
 8000526:	dbf1      	blt.n	800050c <_write+0x12>

  }
  return len;
 8000528:	687b      	ldr	r3, [r7, #4]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3718      	adds	r7, #24
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <_close>:

int _close(int file)
{
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800053e:	4618      	mov	r0, r3
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800055a:	605a      	str	r2, [r3, #4]
  return 0;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <_isatty>:

int _isatty(int file)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000572:	2301      	movs	r3, #1
}
 8000574:	4618      	mov	r0, r3
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
	...

0800059c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <_sbrk+0x5c>)
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <_sbrk+0x60>)
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <_sbrk+0x64>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d102      	bne.n	80005be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <_sbrk+0x64>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <_sbrk+0x68>)
 80005bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <_sbrk+0x64>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d207      	bcs.n	80005dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005cc:	f000 fa8a 	bl	8000ae4 <__errno>
 80005d0:	4603      	mov	r3, r0
 80005d2:	220c      	movs	r2, #12
 80005d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	e009      	b.n	80005f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <_sbrk+0x64>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <_sbrk+0x64>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <_sbrk+0x64>)
 80005ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ee:	68fb      	ldr	r3, [r7, #12]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20020000 	.word	0x20020000
 80005fc:	00000400 	.word	0x00000400
 8000600:	20000078 	.word	0x20000078
 8000604:	200001c8 	.word	0x200001c8

08000608 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800060c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <LoopForever+0x6>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	; (8000648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <LoopForever+0xe>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	; (8000654 <LoopForever+0x16>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000636:	f000 fa5b 	bl	8000af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fddb 	bl	80001f4 <main>

0800063e <LoopForever>:

LoopForever:
  b LoopForever
 800063e:	e7fe      	b.n	800063e <LoopForever>
  ldr   r0, =_estack
 8000640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800064c:	08001014 	.word	0x08001014
  ldr r2, =_sbss
 8000650:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000654:	200001c8 	.word	0x200001c8

08000658 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC_IRQHandler>
	...

0800065c <std>:
 800065c:	2300      	movs	r3, #0
 800065e:	b510      	push	{r4, lr}
 8000660:	4604      	mov	r4, r0
 8000662:	e9c0 3300 	strd	r3, r3, [r0]
 8000666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800066a:	6083      	str	r3, [r0, #8]
 800066c:	8181      	strh	r1, [r0, #12]
 800066e:	6643      	str	r3, [r0, #100]	; 0x64
 8000670:	81c2      	strh	r2, [r0, #14]
 8000672:	6183      	str	r3, [r0, #24]
 8000674:	4619      	mov	r1, r3
 8000676:	2208      	movs	r2, #8
 8000678:	305c      	adds	r0, #92	; 0x5c
 800067a:	f000 f9e5 	bl	8000a48 <memset>
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <std+0x58>)
 8000680:	6263      	str	r3, [r4, #36]	; 0x24
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <std+0x5c>)
 8000684:	62a3      	str	r3, [r4, #40]	; 0x28
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <std+0x60>)
 8000688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <std+0x64>)
 800068c:	6323      	str	r3, [r4, #48]	; 0x30
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <std+0x68>)
 8000690:	6224      	str	r4, [r4, #32]
 8000692:	429c      	cmp	r4, r3
 8000694:	d006      	beq.n	80006a4 <std+0x48>
 8000696:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800069a:	4294      	cmp	r4, r2
 800069c:	d002      	beq.n	80006a4 <std+0x48>
 800069e:	33d0      	adds	r3, #208	; 0xd0
 80006a0:	429c      	cmp	r4, r3
 80006a2:	d105      	bne.n	80006b0 <std+0x54>
 80006a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80006a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ac:	f000 ba44 	b.w	8000b38 <__retarget_lock_init_recursive>
 80006b0:	bd10      	pop	{r4, pc}
 80006b2:	bf00      	nop
 80006b4:	08000899 	.word	0x08000899
 80006b8:	080008bb 	.word	0x080008bb
 80006bc:	080008f3 	.word	0x080008f3
 80006c0:	08000917 	.word	0x08000917
 80006c4:	2000007c 	.word	0x2000007c

080006c8 <stdio_exit_handler>:
 80006c8:	4a02      	ldr	r2, [pc, #8]	; (80006d4 <stdio_exit_handler+0xc>)
 80006ca:	4903      	ldr	r1, [pc, #12]	; (80006d8 <stdio_exit_handler+0x10>)
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <stdio_exit_handler+0x14>)
 80006ce:	f000 b869 	b.w	80007a4 <_fwalk_sglue>
 80006d2:	bf00      	nop
 80006d4:	20000000 	.word	0x20000000
 80006d8:	08000e3d 	.word	0x08000e3d
 80006dc:	2000000c 	.word	0x2000000c

080006e0 <cleanup_stdio>:
 80006e0:	6841      	ldr	r1, [r0, #4]
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <cleanup_stdio+0x34>)
 80006e4:	4299      	cmp	r1, r3
 80006e6:	b510      	push	{r4, lr}
 80006e8:	4604      	mov	r4, r0
 80006ea:	d001      	beq.n	80006f0 <cleanup_stdio+0x10>
 80006ec:	f000 fba6 	bl	8000e3c <_fflush_r>
 80006f0:	68a1      	ldr	r1, [r4, #8]
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <cleanup_stdio+0x38>)
 80006f4:	4299      	cmp	r1, r3
 80006f6:	d002      	beq.n	80006fe <cleanup_stdio+0x1e>
 80006f8:	4620      	mov	r0, r4
 80006fa:	f000 fb9f 	bl	8000e3c <_fflush_r>
 80006fe:	68e1      	ldr	r1, [r4, #12]
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <cleanup_stdio+0x3c>)
 8000702:	4299      	cmp	r1, r3
 8000704:	d004      	beq.n	8000710 <cleanup_stdio+0x30>
 8000706:	4620      	mov	r0, r4
 8000708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800070c:	f000 bb96 	b.w	8000e3c <_fflush_r>
 8000710:	bd10      	pop	{r4, pc}
 8000712:	bf00      	nop
 8000714:	2000007c 	.word	0x2000007c
 8000718:	200000e4 	.word	0x200000e4
 800071c:	2000014c 	.word	0x2000014c

08000720 <global_stdio_init.part.0>:
 8000720:	b510      	push	{r4, lr}
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <global_stdio_init.part.0+0x30>)
 8000724:	4c0b      	ldr	r4, [pc, #44]	; (8000754 <global_stdio_init.part.0+0x34>)
 8000726:	4a0c      	ldr	r2, [pc, #48]	; (8000758 <global_stdio_init.part.0+0x38>)
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	4620      	mov	r0, r4
 800072c:	2200      	movs	r2, #0
 800072e:	2104      	movs	r1, #4
 8000730:	f7ff ff94 	bl	800065c <std>
 8000734:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000738:	2201      	movs	r2, #1
 800073a:	2109      	movs	r1, #9
 800073c:	f7ff ff8e 	bl	800065c <std>
 8000740:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000744:	2202      	movs	r2, #2
 8000746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800074a:	2112      	movs	r1, #18
 800074c:	f7ff bf86 	b.w	800065c <std>
 8000750:	200001b4 	.word	0x200001b4
 8000754:	2000007c 	.word	0x2000007c
 8000758:	080006c9 	.word	0x080006c9

0800075c <__sfp_lock_acquire>:
 800075c:	4801      	ldr	r0, [pc, #4]	; (8000764 <__sfp_lock_acquire+0x8>)
 800075e:	f000 b9ec 	b.w	8000b3a <__retarget_lock_acquire_recursive>
 8000762:	bf00      	nop
 8000764:	200001bd 	.word	0x200001bd

08000768 <__sfp_lock_release>:
 8000768:	4801      	ldr	r0, [pc, #4]	; (8000770 <__sfp_lock_release+0x8>)
 800076a:	f000 b9e7 	b.w	8000b3c <__retarget_lock_release_recursive>
 800076e:	bf00      	nop
 8000770:	200001bd 	.word	0x200001bd

08000774 <__sinit>:
 8000774:	b510      	push	{r4, lr}
 8000776:	4604      	mov	r4, r0
 8000778:	f7ff fff0 	bl	800075c <__sfp_lock_acquire>
 800077c:	6a23      	ldr	r3, [r4, #32]
 800077e:	b11b      	cbz	r3, 8000788 <__sinit+0x14>
 8000780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000784:	f7ff bff0 	b.w	8000768 <__sfp_lock_release>
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <__sinit+0x28>)
 800078a:	6223      	str	r3, [r4, #32]
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <__sinit+0x2c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1f5      	bne.n	8000780 <__sinit+0xc>
 8000794:	f7ff ffc4 	bl	8000720 <global_stdio_init.part.0>
 8000798:	e7f2      	b.n	8000780 <__sinit+0xc>
 800079a:	bf00      	nop
 800079c:	080006e1 	.word	0x080006e1
 80007a0:	200001b4 	.word	0x200001b4

080007a4 <_fwalk_sglue>:
 80007a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007a8:	4607      	mov	r7, r0
 80007aa:	4688      	mov	r8, r1
 80007ac:	4614      	mov	r4, r2
 80007ae:	2600      	movs	r6, #0
 80007b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007b4:	f1b9 0901 	subs.w	r9, r9, #1
 80007b8:	d505      	bpl.n	80007c6 <_fwalk_sglue+0x22>
 80007ba:	6824      	ldr	r4, [r4, #0]
 80007bc:	2c00      	cmp	r4, #0
 80007be:	d1f7      	bne.n	80007b0 <_fwalk_sglue+0xc>
 80007c0:	4630      	mov	r0, r6
 80007c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007c6:	89ab      	ldrh	r3, [r5, #12]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d907      	bls.n	80007dc <_fwalk_sglue+0x38>
 80007cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007d0:	3301      	adds	r3, #1
 80007d2:	d003      	beq.n	80007dc <_fwalk_sglue+0x38>
 80007d4:	4629      	mov	r1, r5
 80007d6:	4638      	mov	r0, r7
 80007d8:	47c0      	blx	r8
 80007da:	4306      	orrs	r6, r0
 80007dc:	3568      	adds	r5, #104	; 0x68
 80007de:	e7e9      	b.n	80007b4 <_fwalk_sglue+0x10>

080007e0 <_puts_r>:
 80007e0:	6a03      	ldr	r3, [r0, #32]
 80007e2:	b570      	push	{r4, r5, r6, lr}
 80007e4:	6884      	ldr	r4, [r0, #8]
 80007e6:	4605      	mov	r5, r0
 80007e8:	460e      	mov	r6, r1
 80007ea:	b90b      	cbnz	r3, 80007f0 <_puts_r+0x10>
 80007ec:	f7ff ffc2 	bl	8000774 <__sinit>
 80007f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007f2:	07db      	lsls	r3, r3, #31
 80007f4:	d405      	bmi.n	8000802 <_puts_r+0x22>
 80007f6:	89a3      	ldrh	r3, [r4, #12]
 80007f8:	0598      	lsls	r0, r3, #22
 80007fa:	d402      	bmi.n	8000802 <_puts_r+0x22>
 80007fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007fe:	f000 f99c 	bl	8000b3a <__retarget_lock_acquire_recursive>
 8000802:	89a3      	ldrh	r3, [r4, #12]
 8000804:	0719      	lsls	r1, r3, #28
 8000806:	d513      	bpl.n	8000830 <_puts_r+0x50>
 8000808:	6923      	ldr	r3, [r4, #16]
 800080a:	b18b      	cbz	r3, 8000830 <_puts_r+0x50>
 800080c:	3e01      	subs	r6, #1
 800080e:	68a3      	ldr	r3, [r4, #8]
 8000810:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000814:	3b01      	subs	r3, #1
 8000816:	60a3      	str	r3, [r4, #8]
 8000818:	b9e9      	cbnz	r1, 8000856 <_puts_r+0x76>
 800081a:	2b00      	cmp	r3, #0
 800081c:	da2e      	bge.n	800087c <_puts_r+0x9c>
 800081e:	4622      	mov	r2, r4
 8000820:	210a      	movs	r1, #10
 8000822:	4628      	mov	r0, r5
 8000824:	f000 f87b 	bl	800091e <__swbuf_r>
 8000828:	3001      	adds	r0, #1
 800082a:	d007      	beq.n	800083c <_puts_r+0x5c>
 800082c:	250a      	movs	r5, #10
 800082e:	e007      	b.n	8000840 <_puts_r+0x60>
 8000830:	4621      	mov	r1, r4
 8000832:	4628      	mov	r0, r5
 8000834:	f000 f8b0 	bl	8000998 <__swsetup_r>
 8000838:	2800      	cmp	r0, #0
 800083a:	d0e7      	beq.n	800080c <_puts_r+0x2c>
 800083c:	f04f 35ff 	mov.w	r5, #4294967295
 8000840:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000842:	07da      	lsls	r2, r3, #31
 8000844:	d405      	bmi.n	8000852 <_puts_r+0x72>
 8000846:	89a3      	ldrh	r3, [r4, #12]
 8000848:	059b      	lsls	r3, r3, #22
 800084a:	d402      	bmi.n	8000852 <_puts_r+0x72>
 800084c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800084e:	f000 f975 	bl	8000b3c <__retarget_lock_release_recursive>
 8000852:	4628      	mov	r0, r5
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	2b00      	cmp	r3, #0
 8000858:	da04      	bge.n	8000864 <_puts_r+0x84>
 800085a:	69a2      	ldr	r2, [r4, #24]
 800085c:	429a      	cmp	r2, r3
 800085e:	dc06      	bgt.n	800086e <_puts_r+0x8e>
 8000860:	290a      	cmp	r1, #10
 8000862:	d004      	beq.n	800086e <_puts_r+0x8e>
 8000864:	6823      	ldr	r3, [r4, #0]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	6022      	str	r2, [r4, #0]
 800086a:	7019      	strb	r1, [r3, #0]
 800086c:	e7cf      	b.n	800080e <_puts_r+0x2e>
 800086e:	4622      	mov	r2, r4
 8000870:	4628      	mov	r0, r5
 8000872:	f000 f854 	bl	800091e <__swbuf_r>
 8000876:	3001      	adds	r0, #1
 8000878:	d1c9      	bne.n	800080e <_puts_r+0x2e>
 800087a:	e7df      	b.n	800083c <_puts_r+0x5c>
 800087c:	6823      	ldr	r3, [r4, #0]
 800087e:	250a      	movs	r5, #10
 8000880:	1c5a      	adds	r2, r3, #1
 8000882:	6022      	str	r2, [r4, #0]
 8000884:	701d      	strb	r5, [r3, #0]
 8000886:	e7db      	b.n	8000840 <_puts_r+0x60>

08000888 <puts>:
 8000888:	4b02      	ldr	r3, [pc, #8]	; (8000894 <puts+0xc>)
 800088a:	4601      	mov	r1, r0
 800088c:	6818      	ldr	r0, [r3, #0]
 800088e:	f7ff bfa7 	b.w	80007e0 <_puts_r>
 8000892:	bf00      	nop
 8000894:	20000058 	.word	0x20000058

08000898 <__sread>:
 8000898:	b510      	push	{r4, lr}
 800089a:	460c      	mov	r4, r1
 800089c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a0:	f000 f8fc 	bl	8000a9c <_read_r>
 80008a4:	2800      	cmp	r0, #0
 80008a6:	bfab      	itete	ge
 80008a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80008aa:	89a3      	ldrhlt	r3, [r4, #12]
 80008ac:	181b      	addge	r3, r3, r0
 80008ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80008b2:	bfac      	ite	ge
 80008b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80008b6:	81a3      	strhlt	r3, [r4, #12]
 80008b8:	bd10      	pop	{r4, pc}

080008ba <__swrite>:
 80008ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008be:	461f      	mov	r7, r3
 80008c0:	898b      	ldrh	r3, [r1, #12]
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	4605      	mov	r5, r0
 80008c6:	460c      	mov	r4, r1
 80008c8:	4616      	mov	r6, r2
 80008ca:	d505      	bpl.n	80008d8 <__swrite+0x1e>
 80008cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008d0:	2302      	movs	r3, #2
 80008d2:	2200      	movs	r2, #0
 80008d4:	f000 f8d0 	bl	8000a78 <_lseek_r>
 80008d8:	89a3      	ldrh	r3, [r4, #12]
 80008da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008e2:	81a3      	strh	r3, [r4, #12]
 80008e4:	4632      	mov	r2, r6
 80008e6:	463b      	mov	r3, r7
 80008e8:	4628      	mov	r0, r5
 80008ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008ee:	f000 b8e7 	b.w	8000ac0 <_write_r>

080008f2 <__sseek>:
 80008f2:	b510      	push	{r4, lr}
 80008f4:	460c      	mov	r4, r1
 80008f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008fa:	f000 f8bd 	bl	8000a78 <_lseek_r>
 80008fe:	1c43      	adds	r3, r0, #1
 8000900:	89a3      	ldrh	r3, [r4, #12]
 8000902:	bf15      	itete	ne
 8000904:	6560      	strne	r0, [r4, #84]	; 0x54
 8000906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800090a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800090e:	81a3      	strheq	r3, [r4, #12]
 8000910:	bf18      	it	ne
 8000912:	81a3      	strhne	r3, [r4, #12]
 8000914:	bd10      	pop	{r4, pc}

08000916 <__sclose>:
 8000916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800091a:	f000 b89d 	b.w	8000a58 <_close_r>

0800091e <__swbuf_r>:
 800091e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000920:	460e      	mov	r6, r1
 8000922:	4614      	mov	r4, r2
 8000924:	4605      	mov	r5, r0
 8000926:	b118      	cbz	r0, 8000930 <__swbuf_r+0x12>
 8000928:	6a03      	ldr	r3, [r0, #32]
 800092a:	b90b      	cbnz	r3, 8000930 <__swbuf_r+0x12>
 800092c:	f7ff ff22 	bl	8000774 <__sinit>
 8000930:	69a3      	ldr	r3, [r4, #24]
 8000932:	60a3      	str	r3, [r4, #8]
 8000934:	89a3      	ldrh	r3, [r4, #12]
 8000936:	071a      	lsls	r2, r3, #28
 8000938:	d525      	bpl.n	8000986 <__swbuf_r+0x68>
 800093a:	6923      	ldr	r3, [r4, #16]
 800093c:	b31b      	cbz	r3, 8000986 <__swbuf_r+0x68>
 800093e:	6823      	ldr	r3, [r4, #0]
 8000940:	6922      	ldr	r2, [r4, #16]
 8000942:	1a98      	subs	r0, r3, r2
 8000944:	6963      	ldr	r3, [r4, #20]
 8000946:	b2f6      	uxtb	r6, r6
 8000948:	4283      	cmp	r3, r0
 800094a:	4637      	mov	r7, r6
 800094c:	dc04      	bgt.n	8000958 <__swbuf_r+0x3a>
 800094e:	4621      	mov	r1, r4
 8000950:	4628      	mov	r0, r5
 8000952:	f000 fa73 	bl	8000e3c <_fflush_r>
 8000956:	b9e0      	cbnz	r0, 8000992 <__swbuf_r+0x74>
 8000958:	68a3      	ldr	r3, [r4, #8]
 800095a:	3b01      	subs	r3, #1
 800095c:	60a3      	str	r3, [r4, #8]
 800095e:	6823      	ldr	r3, [r4, #0]
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	6022      	str	r2, [r4, #0]
 8000964:	701e      	strb	r6, [r3, #0]
 8000966:	6962      	ldr	r2, [r4, #20]
 8000968:	1c43      	adds	r3, r0, #1
 800096a:	429a      	cmp	r2, r3
 800096c:	d004      	beq.n	8000978 <__swbuf_r+0x5a>
 800096e:	89a3      	ldrh	r3, [r4, #12]
 8000970:	07db      	lsls	r3, r3, #31
 8000972:	d506      	bpl.n	8000982 <__swbuf_r+0x64>
 8000974:	2e0a      	cmp	r6, #10
 8000976:	d104      	bne.n	8000982 <__swbuf_r+0x64>
 8000978:	4621      	mov	r1, r4
 800097a:	4628      	mov	r0, r5
 800097c:	f000 fa5e 	bl	8000e3c <_fflush_r>
 8000980:	b938      	cbnz	r0, 8000992 <__swbuf_r+0x74>
 8000982:	4638      	mov	r0, r7
 8000984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000986:	4621      	mov	r1, r4
 8000988:	4628      	mov	r0, r5
 800098a:	f000 f805 	bl	8000998 <__swsetup_r>
 800098e:	2800      	cmp	r0, #0
 8000990:	d0d5      	beq.n	800093e <__swbuf_r+0x20>
 8000992:	f04f 37ff 	mov.w	r7, #4294967295
 8000996:	e7f4      	b.n	8000982 <__swbuf_r+0x64>

08000998 <__swsetup_r>:
 8000998:	b538      	push	{r3, r4, r5, lr}
 800099a:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <__swsetup_r+0xac>)
 800099c:	4605      	mov	r5, r0
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	460c      	mov	r4, r1
 80009a2:	b118      	cbz	r0, 80009ac <__swsetup_r+0x14>
 80009a4:	6a03      	ldr	r3, [r0, #32]
 80009a6:	b90b      	cbnz	r3, 80009ac <__swsetup_r+0x14>
 80009a8:	f7ff fee4 	bl	8000774 <__sinit>
 80009ac:	89a3      	ldrh	r3, [r4, #12]
 80009ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009b2:	0718      	lsls	r0, r3, #28
 80009b4:	d422      	bmi.n	80009fc <__swsetup_r+0x64>
 80009b6:	06d9      	lsls	r1, r3, #27
 80009b8:	d407      	bmi.n	80009ca <__swsetup_r+0x32>
 80009ba:	2309      	movs	r3, #9
 80009bc:	602b      	str	r3, [r5, #0]
 80009be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80009c2:	81a3      	strh	r3, [r4, #12]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	e034      	b.n	8000a34 <__swsetup_r+0x9c>
 80009ca:	0758      	lsls	r0, r3, #29
 80009cc:	d512      	bpl.n	80009f4 <__swsetup_r+0x5c>
 80009ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009d0:	b141      	cbz	r1, 80009e4 <__swsetup_r+0x4c>
 80009d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009d6:	4299      	cmp	r1, r3
 80009d8:	d002      	beq.n	80009e0 <__swsetup_r+0x48>
 80009da:	4628      	mov	r0, r5
 80009dc:	f000 f8b0 	bl	8000b40 <_free_r>
 80009e0:	2300      	movs	r3, #0
 80009e2:	6363      	str	r3, [r4, #52]	; 0x34
 80009e4:	89a3      	ldrh	r3, [r4, #12]
 80009e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80009ea:	81a3      	strh	r3, [r4, #12]
 80009ec:	2300      	movs	r3, #0
 80009ee:	6063      	str	r3, [r4, #4]
 80009f0:	6923      	ldr	r3, [r4, #16]
 80009f2:	6023      	str	r3, [r4, #0]
 80009f4:	89a3      	ldrh	r3, [r4, #12]
 80009f6:	f043 0308 	orr.w	r3, r3, #8
 80009fa:	81a3      	strh	r3, [r4, #12]
 80009fc:	6923      	ldr	r3, [r4, #16]
 80009fe:	b94b      	cbnz	r3, 8000a14 <__swsetup_r+0x7c>
 8000a00:	89a3      	ldrh	r3, [r4, #12]
 8000a02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a0a:	d003      	beq.n	8000a14 <__swsetup_r+0x7c>
 8000a0c:	4621      	mov	r1, r4
 8000a0e:	4628      	mov	r0, r5
 8000a10:	f000 fa62 	bl	8000ed8 <__smakebuf_r>
 8000a14:	89a0      	ldrh	r0, [r4, #12]
 8000a16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a1a:	f010 0301 	ands.w	r3, r0, #1
 8000a1e:	d00a      	beq.n	8000a36 <__swsetup_r+0x9e>
 8000a20:	2300      	movs	r3, #0
 8000a22:	60a3      	str	r3, [r4, #8]
 8000a24:	6963      	ldr	r3, [r4, #20]
 8000a26:	425b      	negs	r3, r3
 8000a28:	61a3      	str	r3, [r4, #24]
 8000a2a:	6923      	ldr	r3, [r4, #16]
 8000a2c:	b943      	cbnz	r3, 8000a40 <__swsetup_r+0xa8>
 8000a2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a32:	d1c4      	bne.n	80009be <__swsetup_r+0x26>
 8000a34:	bd38      	pop	{r3, r4, r5, pc}
 8000a36:	0781      	lsls	r1, r0, #30
 8000a38:	bf58      	it	pl
 8000a3a:	6963      	ldrpl	r3, [r4, #20]
 8000a3c:	60a3      	str	r3, [r4, #8]
 8000a3e:	e7f4      	b.n	8000a2a <__swsetup_r+0x92>
 8000a40:	2000      	movs	r0, #0
 8000a42:	e7f7      	b.n	8000a34 <__swsetup_r+0x9c>
 8000a44:	20000058 	.word	0x20000058

08000a48 <memset>:
 8000a48:	4402      	add	r2, r0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d100      	bne.n	8000a52 <memset+0xa>
 8000a50:	4770      	bx	lr
 8000a52:	f803 1b01 	strb.w	r1, [r3], #1
 8000a56:	e7f9      	b.n	8000a4c <memset+0x4>

08000a58 <_close_r>:
 8000a58:	b538      	push	{r3, r4, r5, lr}
 8000a5a:	4d06      	ldr	r5, [pc, #24]	; (8000a74 <_close_r+0x1c>)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	4604      	mov	r4, r0
 8000a60:	4608      	mov	r0, r1
 8000a62:	602b      	str	r3, [r5, #0]
 8000a64:	f7ff fd65 	bl	8000532 <_close>
 8000a68:	1c43      	adds	r3, r0, #1
 8000a6a:	d102      	bne.n	8000a72 <_close_r+0x1a>
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	b103      	cbz	r3, 8000a72 <_close_r+0x1a>
 8000a70:	6023      	str	r3, [r4, #0]
 8000a72:	bd38      	pop	{r3, r4, r5, pc}
 8000a74:	200001b8 	.word	0x200001b8

08000a78 <_lseek_r>:
 8000a78:	b538      	push	{r3, r4, r5, lr}
 8000a7a:	4d07      	ldr	r5, [pc, #28]	; (8000a98 <_lseek_r+0x20>)
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4608      	mov	r0, r1
 8000a80:	4611      	mov	r1, r2
 8000a82:	2200      	movs	r2, #0
 8000a84:	602a      	str	r2, [r5, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	f7ff fd7a 	bl	8000580 <_lseek>
 8000a8c:	1c43      	adds	r3, r0, #1
 8000a8e:	d102      	bne.n	8000a96 <_lseek_r+0x1e>
 8000a90:	682b      	ldr	r3, [r5, #0]
 8000a92:	b103      	cbz	r3, 8000a96 <_lseek_r+0x1e>
 8000a94:	6023      	str	r3, [r4, #0]
 8000a96:	bd38      	pop	{r3, r4, r5, pc}
 8000a98:	200001b8 	.word	0x200001b8

08000a9c <_read_r>:
 8000a9c:	b538      	push	{r3, r4, r5, lr}
 8000a9e:	4d07      	ldr	r5, [pc, #28]	; (8000abc <_read_r+0x20>)
 8000aa0:	4604      	mov	r4, r0
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	602a      	str	r2, [r5, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f7ff fd08 	bl	80004c0 <_read>
 8000ab0:	1c43      	adds	r3, r0, #1
 8000ab2:	d102      	bne.n	8000aba <_read_r+0x1e>
 8000ab4:	682b      	ldr	r3, [r5, #0]
 8000ab6:	b103      	cbz	r3, 8000aba <_read_r+0x1e>
 8000ab8:	6023      	str	r3, [r4, #0]
 8000aba:	bd38      	pop	{r3, r4, r5, pc}
 8000abc:	200001b8 	.word	0x200001b8

08000ac0 <_write_r>:
 8000ac0:	b538      	push	{r3, r4, r5, lr}
 8000ac2:	4d07      	ldr	r5, [pc, #28]	; (8000ae0 <_write_r+0x20>)
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	4608      	mov	r0, r1
 8000ac8:	4611      	mov	r1, r2
 8000aca:	2200      	movs	r2, #0
 8000acc:	602a      	str	r2, [r5, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	f7ff fd13 	bl	80004fa <_write>
 8000ad4:	1c43      	adds	r3, r0, #1
 8000ad6:	d102      	bne.n	8000ade <_write_r+0x1e>
 8000ad8:	682b      	ldr	r3, [r5, #0]
 8000ada:	b103      	cbz	r3, 8000ade <_write_r+0x1e>
 8000adc:	6023      	str	r3, [r4, #0]
 8000ade:	bd38      	pop	{r3, r4, r5, pc}
 8000ae0:	200001b8 	.word	0x200001b8

08000ae4 <__errno>:
 8000ae4:	4b01      	ldr	r3, [pc, #4]	; (8000aec <__errno+0x8>)
 8000ae6:	6818      	ldr	r0, [r3, #0]
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000058 	.word	0x20000058

08000af0 <__libc_init_array>:
 8000af0:	b570      	push	{r4, r5, r6, lr}
 8000af2:	4d0d      	ldr	r5, [pc, #52]	; (8000b28 <__libc_init_array+0x38>)
 8000af4:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__libc_init_array+0x3c>)
 8000af6:	1b64      	subs	r4, r4, r5
 8000af8:	10a4      	asrs	r4, r4, #2
 8000afa:	2600      	movs	r6, #0
 8000afc:	42a6      	cmp	r6, r4
 8000afe:	d109      	bne.n	8000b14 <__libc_init_array+0x24>
 8000b00:	4d0b      	ldr	r5, [pc, #44]	; (8000b30 <__libc_init_array+0x40>)
 8000b02:	4c0c      	ldr	r4, [pc, #48]	; (8000b34 <__libc_init_array+0x44>)
 8000b04:	f000 fa56 	bl	8000fb4 <_init>
 8000b08:	1b64      	subs	r4, r4, r5
 8000b0a:	10a4      	asrs	r4, r4, #2
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	42a6      	cmp	r6, r4
 8000b10:	d105      	bne.n	8000b1e <__libc_init_array+0x2e>
 8000b12:	bd70      	pop	{r4, r5, r6, pc}
 8000b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b18:	4798      	blx	r3
 8000b1a:	3601      	adds	r6, #1
 8000b1c:	e7ee      	b.n	8000afc <__libc_init_array+0xc>
 8000b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b22:	4798      	blx	r3
 8000b24:	3601      	adds	r6, #1
 8000b26:	e7f2      	b.n	8000b0e <__libc_init_array+0x1e>
 8000b28:	0800100c 	.word	0x0800100c
 8000b2c:	0800100c 	.word	0x0800100c
 8000b30:	0800100c 	.word	0x0800100c
 8000b34:	08001010 	.word	0x08001010

08000b38 <__retarget_lock_init_recursive>:
 8000b38:	4770      	bx	lr

08000b3a <__retarget_lock_acquire_recursive>:
 8000b3a:	4770      	bx	lr

08000b3c <__retarget_lock_release_recursive>:
 8000b3c:	4770      	bx	lr
	...

08000b40 <_free_r>:
 8000b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d044      	beq.n	8000bd0 <_free_r+0x90>
 8000b46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b4a:	9001      	str	r0, [sp, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f1a1 0404 	sub.w	r4, r1, #4
 8000b52:	bfb8      	it	lt
 8000b54:	18e4      	addlt	r4, r4, r3
 8000b56:	f000 f8df 	bl	8000d18 <__malloc_lock>
 8000b5a:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <_free_r+0x94>)
 8000b5c:	9801      	ldr	r0, [sp, #4]
 8000b5e:	6813      	ldr	r3, [r2, #0]
 8000b60:	b933      	cbnz	r3, 8000b70 <_free_r+0x30>
 8000b62:	6063      	str	r3, [r4, #4]
 8000b64:	6014      	str	r4, [r2, #0]
 8000b66:	b003      	add	sp, #12
 8000b68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b6c:	f000 b8da 	b.w	8000d24 <__malloc_unlock>
 8000b70:	42a3      	cmp	r3, r4
 8000b72:	d908      	bls.n	8000b86 <_free_r+0x46>
 8000b74:	6825      	ldr	r5, [r4, #0]
 8000b76:	1961      	adds	r1, r4, r5
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf01      	itttt	eq
 8000b7c:	6819      	ldreq	r1, [r3, #0]
 8000b7e:	685b      	ldreq	r3, [r3, #4]
 8000b80:	1949      	addeq	r1, r1, r5
 8000b82:	6021      	streq	r1, [r4, #0]
 8000b84:	e7ed      	b.n	8000b62 <_free_r+0x22>
 8000b86:	461a      	mov	r2, r3
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	b10b      	cbz	r3, 8000b90 <_free_r+0x50>
 8000b8c:	42a3      	cmp	r3, r4
 8000b8e:	d9fa      	bls.n	8000b86 <_free_r+0x46>
 8000b90:	6811      	ldr	r1, [r2, #0]
 8000b92:	1855      	adds	r5, r2, r1
 8000b94:	42a5      	cmp	r5, r4
 8000b96:	d10b      	bne.n	8000bb0 <_free_r+0x70>
 8000b98:	6824      	ldr	r4, [r4, #0]
 8000b9a:	4421      	add	r1, r4
 8000b9c:	1854      	adds	r4, r2, r1
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	6011      	str	r1, [r2, #0]
 8000ba2:	d1e0      	bne.n	8000b66 <_free_r+0x26>
 8000ba4:	681c      	ldr	r4, [r3, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	6053      	str	r3, [r2, #4]
 8000baa:	440c      	add	r4, r1
 8000bac:	6014      	str	r4, [r2, #0]
 8000bae:	e7da      	b.n	8000b66 <_free_r+0x26>
 8000bb0:	d902      	bls.n	8000bb8 <_free_r+0x78>
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	6003      	str	r3, [r0, #0]
 8000bb6:	e7d6      	b.n	8000b66 <_free_r+0x26>
 8000bb8:	6825      	ldr	r5, [r4, #0]
 8000bba:	1961      	adds	r1, r4, r5
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	bf04      	itt	eq
 8000bc0:	6819      	ldreq	r1, [r3, #0]
 8000bc2:	685b      	ldreq	r3, [r3, #4]
 8000bc4:	6063      	str	r3, [r4, #4]
 8000bc6:	bf04      	itt	eq
 8000bc8:	1949      	addeq	r1, r1, r5
 8000bca:	6021      	streq	r1, [r4, #0]
 8000bcc:	6054      	str	r4, [r2, #4]
 8000bce:	e7ca      	b.n	8000b66 <_free_r+0x26>
 8000bd0:	b003      	add	sp, #12
 8000bd2:	bd30      	pop	{r4, r5, pc}
 8000bd4:	200001c0 	.word	0x200001c0

08000bd8 <sbrk_aligned>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	4e0e      	ldr	r6, [pc, #56]	; (8000c14 <sbrk_aligned+0x3c>)
 8000bdc:	460c      	mov	r4, r1
 8000bde:	6831      	ldr	r1, [r6, #0]
 8000be0:	4605      	mov	r5, r0
 8000be2:	b911      	cbnz	r1, 8000bea <sbrk_aligned+0x12>
 8000be4:	f000 f9d6 	bl	8000f94 <_sbrk_r>
 8000be8:	6030      	str	r0, [r6, #0]
 8000bea:	4621      	mov	r1, r4
 8000bec:	4628      	mov	r0, r5
 8000bee:	f000 f9d1 	bl	8000f94 <_sbrk_r>
 8000bf2:	1c43      	adds	r3, r0, #1
 8000bf4:	d00a      	beq.n	8000c0c <sbrk_aligned+0x34>
 8000bf6:	1cc4      	adds	r4, r0, #3
 8000bf8:	f024 0403 	bic.w	r4, r4, #3
 8000bfc:	42a0      	cmp	r0, r4
 8000bfe:	d007      	beq.n	8000c10 <sbrk_aligned+0x38>
 8000c00:	1a21      	subs	r1, r4, r0
 8000c02:	4628      	mov	r0, r5
 8000c04:	f000 f9c6 	bl	8000f94 <_sbrk_r>
 8000c08:	3001      	adds	r0, #1
 8000c0a:	d101      	bne.n	8000c10 <sbrk_aligned+0x38>
 8000c0c:	f04f 34ff 	mov.w	r4, #4294967295
 8000c10:	4620      	mov	r0, r4
 8000c12:	bd70      	pop	{r4, r5, r6, pc}
 8000c14:	200001c4 	.word	0x200001c4

08000c18 <_malloc_r>:
 8000c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c1c:	1ccd      	adds	r5, r1, #3
 8000c1e:	f025 0503 	bic.w	r5, r5, #3
 8000c22:	3508      	adds	r5, #8
 8000c24:	2d0c      	cmp	r5, #12
 8000c26:	bf38      	it	cc
 8000c28:	250c      	movcc	r5, #12
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	4607      	mov	r7, r0
 8000c2e:	db01      	blt.n	8000c34 <_malloc_r+0x1c>
 8000c30:	42a9      	cmp	r1, r5
 8000c32:	d905      	bls.n	8000c40 <_malloc_r+0x28>
 8000c34:	230c      	movs	r3, #12
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	2600      	movs	r6, #0
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000d14 <_malloc_r+0xfc>
 8000c44:	f000 f868 	bl	8000d18 <__malloc_lock>
 8000c48:	f8d8 3000 	ldr.w	r3, [r8]
 8000c4c:	461c      	mov	r4, r3
 8000c4e:	bb5c      	cbnz	r4, 8000ca8 <_malloc_r+0x90>
 8000c50:	4629      	mov	r1, r5
 8000c52:	4638      	mov	r0, r7
 8000c54:	f7ff ffc0 	bl	8000bd8 <sbrk_aligned>
 8000c58:	1c43      	adds	r3, r0, #1
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	d155      	bne.n	8000d0a <_malloc_r+0xf2>
 8000c5e:	f8d8 4000 	ldr.w	r4, [r8]
 8000c62:	4626      	mov	r6, r4
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d145      	bne.n	8000cf4 <_malloc_r+0xdc>
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d048      	beq.n	8000cfe <_malloc_r+0xe6>
 8000c6c:	6823      	ldr	r3, [r4, #0]
 8000c6e:	4631      	mov	r1, r6
 8000c70:	4638      	mov	r0, r7
 8000c72:	eb04 0903 	add.w	r9, r4, r3
 8000c76:	f000 f98d 	bl	8000f94 <_sbrk_r>
 8000c7a:	4581      	cmp	r9, r0
 8000c7c:	d13f      	bne.n	8000cfe <_malloc_r+0xe6>
 8000c7e:	6821      	ldr	r1, [r4, #0]
 8000c80:	1a6d      	subs	r5, r5, r1
 8000c82:	4629      	mov	r1, r5
 8000c84:	4638      	mov	r0, r7
 8000c86:	f7ff ffa7 	bl	8000bd8 <sbrk_aligned>
 8000c8a:	3001      	adds	r0, #1
 8000c8c:	d037      	beq.n	8000cfe <_malloc_r+0xe6>
 8000c8e:	6823      	ldr	r3, [r4, #0]
 8000c90:	442b      	add	r3, r5
 8000c92:	6023      	str	r3, [r4, #0]
 8000c94:	f8d8 3000 	ldr.w	r3, [r8]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d038      	beq.n	8000d0e <_malloc_r+0xf6>
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	42a2      	cmp	r2, r4
 8000ca0:	d12b      	bne.n	8000cfa <_malloc_r+0xe2>
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	e00f      	b.n	8000cc8 <_malloc_r+0xb0>
 8000ca8:	6822      	ldr	r2, [r4, #0]
 8000caa:	1b52      	subs	r2, r2, r5
 8000cac:	d41f      	bmi.n	8000cee <_malloc_r+0xd6>
 8000cae:	2a0b      	cmp	r2, #11
 8000cb0:	d917      	bls.n	8000ce2 <_malloc_r+0xca>
 8000cb2:	1961      	adds	r1, r4, r5
 8000cb4:	42a3      	cmp	r3, r4
 8000cb6:	6025      	str	r5, [r4, #0]
 8000cb8:	bf18      	it	ne
 8000cba:	6059      	strne	r1, [r3, #4]
 8000cbc:	6863      	ldr	r3, [r4, #4]
 8000cbe:	bf08      	it	eq
 8000cc0:	f8c8 1000 	streq.w	r1, [r8]
 8000cc4:	5162      	str	r2, [r4, r5]
 8000cc6:	604b      	str	r3, [r1, #4]
 8000cc8:	4638      	mov	r0, r7
 8000cca:	f104 060b 	add.w	r6, r4, #11
 8000cce:	f000 f829 	bl	8000d24 <__malloc_unlock>
 8000cd2:	f026 0607 	bic.w	r6, r6, #7
 8000cd6:	1d23      	adds	r3, r4, #4
 8000cd8:	1af2      	subs	r2, r6, r3
 8000cda:	d0ae      	beq.n	8000c3a <_malloc_r+0x22>
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	50a3      	str	r3, [r4, r2]
 8000ce0:	e7ab      	b.n	8000c3a <_malloc_r+0x22>
 8000ce2:	42a3      	cmp	r3, r4
 8000ce4:	6862      	ldr	r2, [r4, #4]
 8000ce6:	d1dd      	bne.n	8000ca4 <_malloc_r+0x8c>
 8000ce8:	f8c8 2000 	str.w	r2, [r8]
 8000cec:	e7ec      	b.n	8000cc8 <_malloc_r+0xb0>
 8000cee:	4623      	mov	r3, r4
 8000cf0:	6864      	ldr	r4, [r4, #4]
 8000cf2:	e7ac      	b.n	8000c4e <_malloc_r+0x36>
 8000cf4:	4634      	mov	r4, r6
 8000cf6:	6876      	ldr	r6, [r6, #4]
 8000cf8:	e7b4      	b.n	8000c64 <_malloc_r+0x4c>
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	e7cc      	b.n	8000c98 <_malloc_r+0x80>
 8000cfe:	230c      	movs	r3, #12
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	4638      	mov	r0, r7
 8000d04:	f000 f80e 	bl	8000d24 <__malloc_unlock>
 8000d08:	e797      	b.n	8000c3a <_malloc_r+0x22>
 8000d0a:	6025      	str	r5, [r4, #0]
 8000d0c:	e7dc      	b.n	8000cc8 <_malloc_r+0xb0>
 8000d0e:	605b      	str	r3, [r3, #4]
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	bf00      	nop
 8000d14:	200001c0 	.word	0x200001c0

08000d18 <__malloc_lock>:
 8000d18:	4801      	ldr	r0, [pc, #4]	; (8000d20 <__malloc_lock+0x8>)
 8000d1a:	f7ff bf0e 	b.w	8000b3a <__retarget_lock_acquire_recursive>
 8000d1e:	bf00      	nop
 8000d20:	200001bc 	.word	0x200001bc

08000d24 <__malloc_unlock>:
 8000d24:	4801      	ldr	r0, [pc, #4]	; (8000d2c <__malloc_unlock+0x8>)
 8000d26:	f7ff bf09 	b.w	8000b3c <__retarget_lock_release_recursive>
 8000d2a:	bf00      	nop
 8000d2c:	200001bc 	.word	0x200001bc

08000d30 <__sflush_r>:
 8000d30:	898a      	ldrh	r2, [r1, #12]
 8000d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d36:	4605      	mov	r5, r0
 8000d38:	0710      	lsls	r0, r2, #28
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	d458      	bmi.n	8000df0 <__sflush_r+0xc0>
 8000d3e:	684b      	ldr	r3, [r1, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dc05      	bgt.n	8000d50 <__sflush_r+0x20>
 8000d44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	dc02      	bgt.n	8000d50 <__sflush_r+0x20>
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0f9      	beq.n	8000d4a <__sflush_r+0x1a>
 8000d56:	2300      	movs	r3, #0
 8000d58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000d5c:	682f      	ldr	r7, [r5, #0]
 8000d5e:	6a21      	ldr	r1, [r4, #32]
 8000d60:	602b      	str	r3, [r5, #0]
 8000d62:	d032      	beq.n	8000dca <__sflush_r+0x9a>
 8000d64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000d66:	89a3      	ldrh	r3, [r4, #12]
 8000d68:	075a      	lsls	r2, r3, #29
 8000d6a:	d505      	bpl.n	8000d78 <__sflush_r+0x48>
 8000d6c:	6863      	ldr	r3, [r4, #4]
 8000d6e:	1ac0      	subs	r0, r0, r3
 8000d70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d72:	b10b      	cbz	r3, 8000d78 <__sflush_r+0x48>
 8000d74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d76:	1ac0      	subs	r0, r0, r3
 8000d78:	2300      	movs	r3, #0
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d7e:	6a21      	ldr	r1, [r4, #32]
 8000d80:	4628      	mov	r0, r5
 8000d82:	47b0      	blx	r6
 8000d84:	1c43      	adds	r3, r0, #1
 8000d86:	89a3      	ldrh	r3, [r4, #12]
 8000d88:	d106      	bne.n	8000d98 <__sflush_r+0x68>
 8000d8a:	6829      	ldr	r1, [r5, #0]
 8000d8c:	291d      	cmp	r1, #29
 8000d8e:	d82b      	bhi.n	8000de8 <__sflush_r+0xb8>
 8000d90:	4a29      	ldr	r2, [pc, #164]	; (8000e38 <__sflush_r+0x108>)
 8000d92:	410a      	asrs	r2, r1
 8000d94:	07d6      	lsls	r6, r2, #31
 8000d96:	d427      	bmi.n	8000de8 <__sflush_r+0xb8>
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6062      	str	r2, [r4, #4]
 8000d9c:	04d9      	lsls	r1, r3, #19
 8000d9e:	6922      	ldr	r2, [r4, #16]
 8000da0:	6022      	str	r2, [r4, #0]
 8000da2:	d504      	bpl.n	8000dae <__sflush_r+0x7e>
 8000da4:	1c42      	adds	r2, r0, #1
 8000da6:	d101      	bne.n	8000dac <__sflush_r+0x7c>
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	b903      	cbnz	r3, 8000dae <__sflush_r+0x7e>
 8000dac:	6560      	str	r0, [r4, #84]	; 0x54
 8000dae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000db0:	602f      	str	r7, [r5, #0]
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d0c9      	beq.n	8000d4a <__sflush_r+0x1a>
 8000db6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	d002      	beq.n	8000dc4 <__sflush_r+0x94>
 8000dbe:	4628      	mov	r0, r5
 8000dc0:	f7ff febe 	bl	8000b40 <_free_r>
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	6360      	str	r0, [r4, #52]	; 0x34
 8000dc8:	e7c0      	b.n	8000d4c <__sflush_r+0x1c>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	4628      	mov	r0, r5
 8000dce:	47b0      	blx	r6
 8000dd0:	1c41      	adds	r1, r0, #1
 8000dd2:	d1c8      	bne.n	8000d66 <__sflush_r+0x36>
 8000dd4:	682b      	ldr	r3, [r5, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0c5      	beq.n	8000d66 <__sflush_r+0x36>
 8000dda:	2b1d      	cmp	r3, #29
 8000ddc:	d001      	beq.n	8000de2 <__sflush_r+0xb2>
 8000dde:	2b16      	cmp	r3, #22
 8000de0:	d101      	bne.n	8000de6 <__sflush_r+0xb6>
 8000de2:	602f      	str	r7, [r5, #0]
 8000de4:	e7b1      	b.n	8000d4a <__sflush_r+0x1a>
 8000de6:	89a3      	ldrh	r3, [r4, #12]
 8000de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dec:	81a3      	strh	r3, [r4, #12]
 8000dee:	e7ad      	b.n	8000d4c <__sflush_r+0x1c>
 8000df0:	690f      	ldr	r7, [r1, #16]
 8000df2:	2f00      	cmp	r7, #0
 8000df4:	d0a9      	beq.n	8000d4a <__sflush_r+0x1a>
 8000df6:	0793      	lsls	r3, r2, #30
 8000df8:	680e      	ldr	r6, [r1, #0]
 8000dfa:	bf08      	it	eq
 8000dfc:	694b      	ldreq	r3, [r1, #20]
 8000dfe:	600f      	str	r7, [r1, #0]
 8000e00:	bf18      	it	ne
 8000e02:	2300      	movne	r3, #0
 8000e04:	eba6 0807 	sub.w	r8, r6, r7
 8000e08:	608b      	str	r3, [r1, #8]
 8000e0a:	f1b8 0f00 	cmp.w	r8, #0
 8000e0e:	dd9c      	ble.n	8000d4a <__sflush_r+0x1a>
 8000e10:	6a21      	ldr	r1, [r4, #32]
 8000e12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000e14:	4643      	mov	r3, r8
 8000e16:	463a      	mov	r2, r7
 8000e18:	4628      	mov	r0, r5
 8000e1a:	47b0      	blx	r6
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	dc06      	bgt.n	8000e2e <__sflush_r+0xfe>
 8000e20:	89a3      	ldrh	r3, [r4, #12]
 8000e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e26:	81a3      	strh	r3, [r4, #12]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	e78e      	b.n	8000d4c <__sflush_r+0x1c>
 8000e2e:	4407      	add	r7, r0
 8000e30:	eba8 0800 	sub.w	r8, r8, r0
 8000e34:	e7e9      	b.n	8000e0a <__sflush_r+0xda>
 8000e36:	bf00      	nop
 8000e38:	dfbffffe 	.word	0xdfbffffe

08000e3c <_fflush_r>:
 8000e3c:	b538      	push	{r3, r4, r5, lr}
 8000e3e:	690b      	ldr	r3, [r1, #16]
 8000e40:	4605      	mov	r5, r0
 8000e42:	460c      	mov	r4, r1
 8000e44:	b913      	cbnz	r3, 8000e4c <_fflush_r+0x10>
 8000e46:	2500      	movs	r5, #0
 8000e48:	4628      	mov	r0, r5
 8000e4a:	bd38      	pop	{r3, r4, r5, pc}
 8000e4c:	b118      	cbz	r0, 8000e56 <_fflush_r+0x1a>
 8000e4e:	6a03      	ldr	r3, [r0, #32]
 8000e50:	b90b      	cbnz	r3, 8000e56 <_fflush_r+0x1a>
 8000e52:	f7ff fc8f 	bl	8000774 <__sinit>
 8000e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f3      	beq.n	8000e46 <_fflush_r+0xa>
 8000e5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000e60:	07d0      	lsls	r0, r2, #31
 8000e62:	d404      	bmi.n	8000e6e <_fflush_r+0x32>
 8000e64:	0599      	lsls	r1, r3, #22
 8000e66:	d402      	bmi.n	8000e6e <_fflush_r+0x32>
 8000e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e6a:	f7ff fe66 	bl	8000b3a <__retarget_lock_acquire_recursive>
 8000e6e:	4628      	mov	r0, r5
 8000e70:	4621      	mov	r1, r4
 8000e72:	f7ff ff5d 	bl	8000d30 <__sflush_r>
 8000e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000e78:	07da      	lsls	r2, r3, #31
 8000e7a:	4605      	mov	r5, r0
 8000e7c:	d4e4      	bmi.n	8000e48 <_fflush_r+0xc>
 8000e7e:	89a3      	ldrh	r3, [r4, #12]
 8000e80:	059b      	lsls	r3, r3, #22
 8000e82:	d4e1      	bmi.n	8000e48 <_fflush_r+0xc>
 8000e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e86:	f7ff fe59 	bl	8000b3c <__retarget_lock_release_recursive>
 8000e8a:	e7dd      	b.n	8000e48 <_fflush_r+0xc>

08000e8c <__swhatbuf_r>:
 8000e8c:	b570      	push	{r4, r5, r6, lr}
 8000e8e:	460c      	mov	r4, r1
 8000e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e94:	2900      	cmp	r1, #0
 8000e96:	b096      	sub	sp, #88	; 0x58
 8000e98:	4615      	mov	r5, r2
 8000e9a:	461e      	mov	r6, r3
 8000e9c:	da0d      	bge.n	8000eba <__swhatbuf_r+0x2e>
 8000e9e:	89a3      	ldrh	r3, [r4, #12]
 8000ea0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000ea4:	f04f 0100 	mov.w	r1, #0
 8000ea8:	bf0c      	ite	eq
 8000eaa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000eae:	2340      	movne	r3, #64	; 0x40
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	6031      	str	r1, [r6, #0]
 8000eb4:	602b      	str	r3, [r5, #0]
 8000eb6:	b016      	add	sp, #88	; 0x58
 8000eb8:	bd70      	pop	{r4, r5, r6, pc}
 8000eba:	466a      	mov	r2, sp
 8000ebc:	f000 f848 	bl	8000f50 <_fstat_r>
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	dbec      	blt.n	8000e9e <__swhatbuf_r+0x12>
 8000ec4:	9901      	ldr	r1, [sp, #4]
 8000ec6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000eca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000ece:	4259      	negs	r1, r3
 8000ed0:	4159      	adcs	r1, r3
 8000ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed6:	e7eb      	b.n	8000eb0 <__swhatbuf_r+0x24>

08000ed8 <__smakebuf_r>:
 8000ed8:	898b      	ldrh	r3, [r1, #12]
 8000eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000edc:	079d      	lsls	r5, r3, #30
 8000ede:	4606      	mov	r6, r0
 8000ee0:	460c      	mov	r4, r1
 8000ee2:	d507      	bpl.n	8000ef4 <__smakebuf_r+0x1c>
 8000ee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000ee8:	6023      	str	r3, [r4, #0]
 8000eea:	6123      	str	r3, [r4, #16]
 8000eec:	2301      	movs	r3, #1
 8000eee:	6163      	str	r3, [r4, #20]
 8000ef0:	b002      	add	sp, #8
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
 8000ef4:	ab01      	add	r3, sp, #4
 8000ef6:	466a      	mov	r2, sp
 8000ef8:	f7ff ffc8 	bl	8000e8c <__swhatbuf_r>
 8000efc:	9900      	ldr	r1, [sp, #0]
 8000efe:	4605      	mov	r5, r0
 8000f00:	4630      	mov	r0, r6
 8000f02:	f7ff fe89 	bl	8000c18 <_malloc_r>
 8000f06:	b948      	cbnz	r0, 8000f1c <__smakebuf_r+0x44>
 8000f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f0c:	059a      	lsls	r2, r3, #22
 8000f0e:	d4ef      	bmi.n	8000ef0 <__smakebuf_r+0x18>
 8000f10:	f023 0303 	bic.w	r3, r3, #3
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	81a3      	strh	r3, [r4, #12]
 8000f1a:	e7e3      	b.n	8000ee4 <__smakebuf_r+0xc>
 8000f1c:	89a3      	ldrh	r3, [r4, #12]
 8000f1e:	6020      	str	r0, [r4, #0]
 8000f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f24:	81a3      	strh	r3, [r4, #12]
 8000f26:	9b00      	ldr	r3, [sp, #0]
 8000f28:	6163      	str	r3, [r4, #20]
 8000f2a:	9b01      	ldr	r3, [sp, #4]
 8000f2c:	6120      	str	r0, [r4, #16]
 8000f2e:	b15b      	cbz	r3, 8000f48 <__smakebuf_r+0x70>
 8000f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f34:	4630      	mov	r0, r6
 8000f36:	f000 f81d 	bl	8000f74 <_isatty_r>
 8000f3a:	b128      	cbz	r0, 8000f48 <__smakebuf_r+0x70>
 8000f3c:	89a3      	ldrh	r3, [r4, #12]
 8000f3e:	f023 0303 	bic.w	r3, r3, #3
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	81a3      	strh	r3, [r4, #12]
 8000f48:	89a3      	ldrh	r3, [r4, #12]
 8000f4a:	431d      	orrs	r5, r3
 8000f4c:	81a5      	strh	r5, [r4, #12]
 8000f4e:	e7cf      	b.n	8000ef0 <__smakebuf_r+0x18>

08000f50 <_fstat_r>:
 8000f50:	b538      	push	{r3, r4, r5, lr}
 8000f52:	4d07      	ldr	r5, [pc, #28]	; (8000f70 <_fstat_r+0x20>)
 8000f54:	2300      	movs	r3, #0
 8000f56:	4604      	mov	r4, r0
 8000f58:	4608      	mov	r0, r1
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	602b      	str	r3, [r5, #0]
 8000f5e:	f7ff faf4 	bl	800054a <_fstat>
 8000f62:	1c43      	adds	r3, r0, #1
 8000f64:	d102      	bne.n	8000f6c <_fstat_r+0x1c>
 8000f66:	682b      	ldr	r3, [r5, #0]
 8000f68:	b103      	cbz	r3, 8000f6c <_fstat_r+0x1c>
 8000f6a:	6023      	str	r3, [r4, #0]
 8000f6c:	bd38      	pop	{r3, r4, r5, pc}
 8000f6e:	bf00      	nop
 8000f70:	200001b8 	.word	0x200001b8

08000f74 <_isatty_r>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	4d06      	ldr	r5, [pc, #24]	; (8000f90 <_isatty_r+0x1c>)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	602b      	str	r3, [r5, #0]
 8000f80:	f7ff faf3 	bl	800056a <_isatty>
 8000f84:	1c43      	adds	r3, r0, #1
 8000f86:	d102      	bne.n	8000f8e <_isatty_r+0x1a>
 8000f88:	682b      	ldr	r3, [r5, #0]
 8000f8a:	b103      	cbz	r3, 8000f8e <_isatty_r+0x1a>
 8000f8c:	6023      	str	r3, [r4, #0]
 8000f8e:	bd38      	pop	{r3, r4, r5, pc}
 8000f90:	200001b8 	.word	0x200001b8

08000f94 <_sbrk_r>:
 8000f94:	b538      	push	{r3, r4, r5, lr}
 8000f96:	4d06      	ldr	r5, [pc, #24]	; (8000fb0 <_sbrk_r+0x1c>)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	602b      	str	r3, [r5, #0]
 8000fa0:	f7ff fafc 	bl	800059c <_sbrk>
 8000fa4:	1c43      	adds	r3, r0, #1
 8000fa6:	d102      	bne.n	8000fae <_sbrk_r+0x1a>
 8000fa8:	682b      	ldr	r3, [r5, #0]
 8000faa:	b103      	cbz	r3, 8000fae <_sbrk_r+0x1a>
 8000fac:	6023      	str	r3, [r4, #0]
 8000fae:	bd38      	pop	{r3, r4, r5, pc}
 8000fb0:	200001b8 	.word	0x200001b8

08000fb4 <_init>:
 8000fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb6:	bf00      	nop
 8000fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fba:	bc08      	pop	{r3}
 8000fbc:	469e      	mov	lr, r3
 8000fbe:	4770      	bx	lr

08000fc0 <_fini>:
 8000fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc2:	bf00      	nop
 8000fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fc6:	bc08      	pop	{r3}
 8000fc8:	469e      	mov	lr, r3
 8000fca:	4770      	bx	lr
